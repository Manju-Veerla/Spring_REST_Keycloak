name: Maven Build and Reports

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:
    runs-on: ubuntu-latest
    services:
      # PostgreSQL service
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: workshop_db
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # Keycloak service with H2 in-memory database (simpler setup for CI)
      keycloak:
        image: quay.io/keycloak/keycloak:22.0.5
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          # Use H2 in-memory database for simplicity in CI
          KC_DB: postgres
          KC_DB_URL: jdbc:postgresql://localhost:5432/keycloak
          KC_DB_USERNAME: keycloak
          KC_DB_PASSWORD: password
        ports:
          - 8081:8081
        # Wait for Keycloak to be ready
        options: >-
          --health-cmd "curl -f http://localhost:8081/realms/master || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 60s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Install Allure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        run: |
          # Build the Docker image using the multi-stage Dockerfile
          docker build -t workshop-service:latest .
          
          # List all images (for debugging)
          docker images
          
          # Create a custom network for the containers
          docker network create workshop-network || true
          
          # Start the application container with proper environment variables
          docker run -d \
            --name workshop-service \
            --network workshop-network \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=test \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/workshop_db \
            -e SPRING_DATASOURCE_USERNAME=admin \
            -e SPRING_DATASOURCE_PASSWORD=admin \
            -e KEYCLOAK_AUTH_SERVER_URL=http://localhost:8081/realms/workshop \
            -e KEYCLOAK_CLIENT_ID=workshop-service \
            -e KEYCLOAK_CLIENT_SECRET=LIxDn2IK6KbdmstKTqeug8PmdB21EKLh \
            workshop-service:latest
          
          # Wait for the application to start
          echo "Waiting for application to start..."
          timeout 180 bash -c 'until curl -s http://localhost:8080/actuator/health | grep -q "\"status\":\"UP\""; do sleep 5; echo "Waiting for app to start..."; done'
          echo "Application started successfully"
          
          # Log container status (for debugging)
          docker ps -a
          docker logs workshop-service

      - name: Build and test with Maven
        run: |
          mvn clean verify \
            -Dspring.profiles.active=test \
            -Dmaven.test.failure.ignore=true \
            -Dallure.results.directory=target/allure-results \
            -Djava.awt.headless=true \
            -Dtest-config.properties=file:${GITHUB_WORKSPACE}/src/test/resources/test-config.properties

      - name: Generate Allure report
        if: always()
        run: |
          allure generate target/allure-results --clean -o target/allure-report

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report
          retention-days: 30

      - name: Upload TestNG Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testng-report
          path: target/surefire-reports
          retention-days: 30
          
      - name: Upload application logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: spring-application-logs
          path: spring.log
          retention-days: 7