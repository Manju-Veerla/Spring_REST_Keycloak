name: Maven Build and Reports

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: workshop_db  # Default database for the application
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_MULTIPLE_DATABASES: keycloak,workshop_db  # Create both databases
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 30
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Docker network
        run: docker network create workshop-network || true

      - name: Setup PostgreSQL
        run: |
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker exec $(docker ps -q --filter ancestor=postgres:latest) pg_isready -U admin; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (Attempt $i/30)"
            sleep 2
            
            if [ $i -eq 30 ]; then
              echo "Failed to connect to PostgreSQL after 30 attempts"
              docker logs $(docker ps -q --filter ancestor=postgres:latest) || true
              exit 1
            fi
          done
          
          # Create databases if they don't exist
          for db in keycloak workshop_db; do
            echo "Checking/creating database: $db"
            if ! docker exec $(docker ps -q --filter ancestor=postgres:latest) psql -U admin -lqt | cut -d \| -f 1 | grep -qw $db; then
              echo "Creating database: $db"
              docker exec $(docker ps -q --filter ancestor=postgres:latest) psql -U admin -c "CREATE DATABASE $db;"
            else
              echo "Database $db already exists"
            fi
          done
          
          # Connect PostgreSQL to the network if not already connected
          echo "Connecting PostgreSQL to network..."
          docker network connect workshop-network $(docker ps -q --filter ancestor=postgres:latest) || \
            echo "PostgreSQL is already connected to the network or connection failed"
          
          # Simple verification that PostgreSQL is accessible
          echo "Verifying PostgreSQL is accessible..."
          docker run --rm --network workshop-network postgres:latest pg_isready -h postgres -U admin

      - name: Start Keycloak
        run: |
          # Debug: Show current directory
          echo "Current directory: $(pwd)"
          
          # Debug: Check if realm file exists
          echo "Checking if realm file exists..."
          ls -la docker/keycloak/realms/ || true
          
          # Start Keycloak with PostgreSQL
          echo "Starting Keycloak container..."
          docker run -d \
            --name keycloak \
            --network workshop-network \
            -p 8081:8080 \
            -e KEYCLOAK_ADMIN=admin \
            -e KEYCLOAK_ADMIN_PASSWORD=admin \
            -e KC_DB=postgres \
            -e KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak?currentSchema=public \
            -e KC_DB_USERNAME=admin \
            -e KC_DB_PASSWORD=admin \
            -e KC_DB_SCHEMA=public \
            -e KC_TRANSACTION_XA_ENABLED=false \
            -e KC_HOSTNAME_STRICT=false \
            -e KC_HOSTNAME_STRICT_HTTPS=false \
            -e KC_HTTP_ENABLED=true \
            -e KC_HTTP_PORT=8080 \
            -e KC_PROXY=edge \
            -e KC_HOSTNAME=localhost \
            -v ${{ github.workspace }}/docker/keycloak/realms/workshop-realm.json:/opt/keycloak/data/import/workshop-realm.json \
            quay.io/keycloak/keycloak:latest \
            start-dev --import-realm --http-relative-path=/auth

          # Show container logs for debugging
          echo "Container logs:"
          docker logs keycloak --tail 50 || true
          
          # Wait for Keycloak to be ready with timeout
          echo "Waiting for Keycloak to be ready..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s -v http://localhost:8081/auth/realms/master >/dev/null 2>&1; then
              echo "Keycloak is ready!"
              break
            fi
            
            echo "Waiting for Keycloak to be ready... (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            docker logs --tail 10 keycloak 2>&1 || true
            sleep 5
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Timed out waiting for Keycloak to start"
            docker logs keycloak || true
            exit 1
          fi
          
          # Get admin token
          echo "Getting admin token..."
          TOKEN=$(curl -s \
            -d "client_id=admin-cli" \
            -d "username=admin" \
            -d "password=admin" \
            -d "grant_type=password" \
            "http://localhost:8081/auth/realms/master/protocol/openid-connect/token" | jq -r '.access_token')
            
          # List imported realms
          echo "Checking imported realms..."
          curl -v http://localhost:8081/auth/admin/realms \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Install Allure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        run: |
          docker build -t workshop-service:latest .
          docker images

          docker run -d \
            --name workshop-service \
            --network workshop-network \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=test \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/workshop_db \
            -e SPRING_DATASOURCE_USERNAME=admin \
            -e SPRING_DATASOURCE_PASSWORD=admin \
            -e KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8081/realms/workshop \
            -e KEYCLOAK_CLIENT_ID=workshop-service \
            -e KEYCLOAK_CLIENT_SECRET=LIxDn2IK6KbdmstKTqeug8PmdB21EKLh \
            workshop-service:latest

          echo "Waiting for application to start..."
          timeout 180 bash -c 'until curl -s http://localhost:8080/actuator/health | grep -q "\"status\":\"UP\""; do sleep 5; echo "Waiting for app to start..."; done'
          echo "Application started successfully"

          docker ps -a
          docker logs workshop-service

      - name: Build and test with Maven
        run: mvn clean verify -Dspring.profiles.active=test -Dmaven.test.failure.ignore=true -Dallure.results.directory=target/allure-results -Djava.awt.headless=true

      - name: Generate Allure report
        if: always()
        run: allure generate target/allure-results --clean -o target/allure-report

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report
          retention-days: 30

      - name: Upload TestNG Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testng-report
          path: target/surefire-reports
          retention-days: 30

      - name: Upload application logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: spring-application-logs
          path: spring.log
          retention-days: 7